#! /bin/sh
### BEGIN INIT INFO
# Provides:          calico
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Calico
# Description:       Calico app service launcher
### END INIT INFO

# Author: Aur√©lien Maury <m4momo@rtnp.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"
DESC="Calico webapp"
NAME=calico
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

export VERTX_HOME="/opt/vert.x-2.1.1"
export JAVA_HOME="/usr/lib/jvm/java-7-openjdk-armhf"

CLASSPATH="${VERTX_HOME}/conf/*:${VERTX_HOME}/lib/*"

VERTX_MODS="/home/calico/vertx-mods"
VERTX_OPTS="$VERTX_OPTS -Dvertx.mods=$VERTX_MODS"

JAVA_OPTS="-Xmx128m"
JVM_OPTS="$JAVA_OPTS $JMX_OPTS $VERTX_OPTS"
JAVACMD="$JAVA_HOME/bin/java"

DAEMON="$JAVACMD"
DAEMON_ARGS="$JVM_OPTS \
    -Djava.util.logging.config.file=${VERTX_JUL_CONFIG:-${VERTX_HOME}/conf/logging.properties} \
    -Dvertx.home=$VERTX_HOME \
    -server \
    -cp $CLASSPATH \
    org.vertx.java.platform.impl.cli.Starter runzip /home/calico/vertx-mods/calico-1.0.zip -conf /home/calico/calico.conf"
USER=calico
GROUP=www-data

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
. /lib/init/vars.sh
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	start-stop-daemon --start --quiet -c $USER:$GROUP -b --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1

	start-stop-daemon --start --quiet -c $USER:$GROUP -b --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME

	RETVAL="$?"

	[ "$RETVAL" = 2 ] && return 2

	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON

	[ "$?" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE

	return "$RETVAL"
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
